package Repository.SportField;

import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import com.datastax.oss.driver.internal.querybuilder.update.DefaultUpdate;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import model.SportField;
import model.SportFieldHelper__MapperGenerated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class SportFieldDaoImpl__MapperGenerated extends DaoBase implements SportFieldDao {
  private static final Logger LOG = LoggerFactory.getLogger(SportFieldDaoImpl__MapperGenerated.class);

  private final SportFieldHelper__MapperGenerated sportFieldHelper;

  private final PreparedStatement createStatement;

  private final PreparedStatement deleteStatement;

  private final PreparedStatement updateStatement;

  private final FindFieldQueryProvider findByIdInvoker;

  private final FindFieldsQueryProvider findAllFieldsInvoker;

  private SportFieldDaoImpl__MapperGenerated(MapperContext context,
      SportFieldHelper__MapperGenerated sportFieldHelper, PreparedStatement createStatement,
      PreparedStatement deleteStatement, PreparedStatement updateStatement,
      FindFieldQueryProvider findByIdInvoker, FindFieldsQueryProvider findAllFieldsInvoker) {
    super(context);
    this.sportFieldHelper = sportFieldHelper;
    this.createStatement = createStatement;
    this.deleteStatement = deleteStatement;
    this.updateStatement = updateStatement;
    this.findByIdInvoker = findByIdInvoker;
    this.findAllFieldsInvoker = findAllFieldsInvoker;
  }

  @Override
  public void create(SportField field) {
    BoundStatementBuilder boundStatementBuilder = createStatement.boundStatementBuilder();
    sportFieldHelper.set(field, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void delete(SportField field) {
    BoundStatementBuilder boundStatementBuilder = deleteStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("id", field.getId(), String.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public SportField findById(String id) {
    return findByIdInvoker.findById(id);
  }

  @Override
  public List<SportField> findAllFields() {
    return findAllFieldsInvoker.findAllFields();
  }

  @Override
  public void update(SportField field) {
    BoundStatementBuilder boundStatementBuilder = updateStatement.boundStatementBuilder();
    sportFieldHelper.set(field, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  public static CompletableFuture<SportFieldDao> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      SportFieldHelper__MapperGenerated sportFieldHelper = new SportFieldHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        sportFieldHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `create(model.SportField)`:
      SimpleStatement createStatement_simple = sportFieldHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method create(model.SportField)",
          context.getSession().getName(),
          createStatement_simple.getQuery());
      CompletionStage<PreparedStatement> createStatement = prepare(createStatement_simple, context);
      prepareStages.add(createStatement);
      // Prepare the statement for `delete(model.SportField)`:
      SimpleStatement deleteStatement_simple = sportFieldHelper.deleteByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method delete(model.SportField)",
          context.getSession().getName(),
          deleteStatement_simple.getQuery());
      CompletionStage<PreparedStatement> deleteStatement = prepare(deleteStatement_simple, context);
      prepareStages.add(deleteStatement);
      // Prepare the statement for `update(model.SportField)`:
      SimpleStatement updateStatement_simple = SimpleStatement.newInstance(((DefaultUpdate)sportFieldHelper.updateByPrimaryKey()).asCql());
      LOG.debug("[{}] Preparing query `{}` for method update(model.SportField)",
          context.getSession().getName(),
          updateStatement_simple.getQuery());
      CompletionStage<PreparedStatement> updateStatement = prepare(updateStatement_simple, context);
      prepareStages.add(updateStatement);
      // Initialize all method invokers
      FindFieldQueryProvider findByIdInvoker = new FindFieldQueryProvider(context, sportFieldHelper);
      FindFieldsQueryProvider findAllFieldsInvoker = new FindFieldsQueryProvider(context, sportFieldHelper);
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (SportFieldDao) new SportFieldDaoImpl__MapperGenerated(context,
              sportFieldHelper,
              CompletableFutures.getCompleted(createStatement),
              CompletableFutures.getCompleted(deleteStatement),
              CompletableFutures.getCompleted(updateStatement),
              findByIdInvoker,
              findAllFieldsInvoker))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static SportFieldDao init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
