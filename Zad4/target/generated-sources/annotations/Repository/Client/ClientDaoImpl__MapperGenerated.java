package Repository.Client;

import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import com.datastax.oss.driver.internal.querybuilder.update.DefaultUpdate;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import model.Client;
import model.ClientHelper__MapperGenerated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class ClientDaoImpl__MapperGenerated extends DaoBase implements ClientDao {
  private static final Logger LOG = LoggerFactory.getLogger(ClientDaoImpl__MapperGenerated.class);

  private final ClientHelper__MapperGenerated clientHelper;

  private final PreparedStatement createStatement;

  private final PreparedStatement deleteStatement;

  private final PreparedStatement updateStatement;

  private final FindClientQueryProvider findByIdInvoker;

  private final FindClientsQueryProvider findAllClientsInvoker;

  private ClientDaoImpl__MapperGenerated(MapperContext context,
      ClientHelper__MapperGenerated clientHelper, PreparedStatement createStatement,
      PreparedStatement deleteStatement, PreparedStatement updateStatement,
      FindClientQueryProvider findByIdInvoker, FindClientsQueryProvider findAllClientsInvoker) {
    super(context);
    this.clientHelper = clientHelper;
    this.createStatement = createStatement;
    this.deleteStatement = deleteStatement;
    this.updateStatement = updateStatement;
    this.findByIdInvoker = findByIdInvoker;
    this.findAllClientsInvoker = findAllClientsInvoker;
  }

  @Override
  public void create(Client client) {
    BoundStatementBuilder boundStatementBuilder = createStatement.boundStatementBuilder();
    clientHelper.set(client, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void delete(Client client) {
    BoundStatementBuilder boundStatementBuilder = deleteStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("id", client.getId(), String.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public Client findById(String id) {
    return findByIdInvoker.findById(id);
  }

  @Override
  public List<Client> findAllClients() {
    return findAllClientsInvoker.findAllClients();
  }

  @Override
  public void update(Client client) {
    BoundStatementBuilder boundStatementBuilder = updateStatement.boundStatementBuilder();
    clientHelper.set(client, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  public static CompletableFuture<ClientDao> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      ClientHelper__MapperGenerated clientHelper = new ClientHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        clientHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `create(model.Client)`:
      SimpleStatement createStatement_simple = clientHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method create(model.Client)",
          context.getSession().getName(),
          createStatement_simple.getQuery());
      CompletionStage<PreparedStatement> createStatement = prepare(createStatement_simple, context);
      prepareStages.add(createStatement);
      // Prepare the statement for `delete(model.Client)`:
      SimpleStatement deleteStatement_simple = clientHelper.deleteByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method delete(model.Client)",
          context.getSession().getName(),
          deleteStatement_simple.getQuery());
      CompletionStage<PreparedStatement> deleteStatement = prepare(deleteStatement_simple, context);
      prepareStages.add(deleteStatement);
      // Prepare the statement for `update(model.Client)`:
      SimpleStatement updateStatement_simple = SimpleStatement.newInstance(((DefaultUpdate)clientHelper.updateByPrimaryKey()).asCql());
      LOG.debug("[{}] Preparing query `{}` for method update(model.Client)",
          context.getSession().getName(),
          updateStatement_simple.getQuery());
      CompletionStage<PreparedStatement> updateStatement = prepare(updateStatement_simple, context);
      prepareStages.add(updateStatement);
      // Initialize all method invokers
      FindClientQueryProvider findByIdInvoker = new FindClientQueryProvider(context, clientHelper);
      FindClientsQueryProvider findAllClientsInvoker = new FindClientsQueryProvider(context, clientHelper);
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (ClientDao) new ClientDaoImpl__MapperGenerated(context,
              clientHelper,
              CompletableFutures.getCompleted(createStatement),
              CompletableFutures.getCompleted(deleteStatement),
              CompletableFutures.getCompleted(updateStatement),
              findByIdInvoker,
              findAllClientsInvoker))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static ClientDao init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
